1.FIBONACCI USING RECURSION:
#include <stdio.h>
int fibonacci(int n) {
    if (n <= 1)
        return n;
    return fibonacci(n - 1) + fibonacci(n - 2);
}
int main() {
    int n, i;  
    printf("Enter the number of terms: ");
    scanf("%d", &n);
    printf("Fibonacci Series: ");
    for (i = 0; i < n; i++) {
        printf("%d ", fibonacci(i));
    }
    return 0;
}

2.GIVEN NUMBER IS ARMSTRONG NUMBER OR NOT USING RECURSIVE FUNCTION:

#include <stdio.h>
int power(int base, int exponent) {
    if (exponent == 0)
        return 1;
    return base * power(base, exponent - 1);
}
int order(int num) {
    int count = 0;
    while (num != 0) {
        count++;
        num /= 10;
    }
    return count;
}
int isArmstrong(int num) {
    int temp = num;
    int sum = 0;
    int digits = order(num);
    while (temp != 0) {
        int remainder = temp % 10;
        sum += power(remainder, digits);
        temp /= 10;
    }
    return num == sum;
}
int main() {
    int number;
    printf("Enter a number: ");
    scanf("%d", &number);
    if (isArmstrong(number))
        printf("%d is an Armstrong number.\n", number);
    else
        printf("%d is not an Armstrong number.\n", number);
    return 0;
}

3.GCD OF TWO NUMBERS USING RECURSIVE FACTORIZATION:

#include <stdio.h>
int gcd(int a, int b) {
    if (b == 0) {
        return a;
    } else {
        return gcd(b, a % b);
    }
}
int main() {
    int num1, num2;
    printf("Enter two numbers: ");
    scanf("%d %d", &num1, &num2);
    printf("GCD of %d and %d is %d", num1, num2, gcd(num1, num2));
    return 0;
}

4.LARGEST ELEMENT IN THE ARRAY:

#include <stdio.h>
int main() {
    int arr[] = {10, 20, 4, 45, 99};
    int n = sizeof(arr) / sizeof(arr[0]);
    int max = arr[0];
    for (int i = 1; i < n; i++) {
        if (arr[i] > max) {
            max = arr[i];
        }
    }
    printf("The largest element in the array is: %d", max);
    return 0;
}
5.FACTORIAL OF A NUMBER USING RECURSION:
#include <stdio.h>
int factorial(int n);
int main() {
    int num;
    printf("Enter a positive integer: ");
    scanf("%d", &num);
    printf("Factorial of %d = %d", num, factorial(num));
    return 0;
}
int factorial(int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

6.COPY ONE STRING TO ANOTHER :
#include <stdio.h>
void stringCopy(char *dest, const char *src) {
    while (*src) {
        *dest = *src;
        src++;
        dest++;
    }
    *dest = '\0';
}
int main() {
    char source[] = "Hello, World!";
    char destination[50];
    stringCopy(destination, source);

    printf("Source String: %s\n", source);
    printf("Destination String: %s\n", destination);
    return 0;
}

7.REVERSE A STRING USING RECURSION

#include <stdio.h>
void reverseString(char str[]) {
    if (str[0] == '\0') {
        return;
    }
    reverseString(&str[1]);
    printf("%c", str[0]);
}
int main() {
    char str[] = "CHANNA MEREYAA";
    reverseString(str);
    return 0;
}

8.GENERATE PRIME NUMBER USING RECURSION:

#include <stdio.h>
int isPrime(int num, int i)
 {
    if (i == 1) 
	{
        return 1;
    } 
	else 
	{
        if (num % i == 0) 
		{
            return 0;
        }
		 else 
		 {
            return isPrime(num, i - 1);
        }
    }
}
void generatePrimes(int n)
 {
    if (n > 1)
	 {
        if (isPrime(n, n / 2) == 1) 
		{
            printf("%d is a prime number.\n", n);
        }
        generatePrimes(n - 1);
    }
}
int main()
 {
    int limit;
    printf("Enter the limit to generate prime numbers: ");
    scanf("%d", &limit);
    printf("Prime numbers up to %d are:\n", limit);
    generatePrimes(limit);
    return 0;
}


9.PRIME NUMBER OR NOT USING RECURSION:
#include <stdio.h>
int isPrime(int num, int i) {
    if (i == 1) {
        return 1;
    } else {
        if (num % i == 0) {
            return 0;
        } else {
            return isPrime(num, i - 1);
        }
    }
}
int main() {
    int num;
    printf("Enter a number: ");
    scanf("%d", &num);
    if (num < 2) {
        printf("%d is not a prime number.\n", num);
    } else {
        if (isPrime(num, num / 2) == 1) {
            printf("%d is a prime number.\n", num);
        } else {
            printf("%d is not a prime number.\n", num);
        }
    }
    return 0;
}



10.STRING IS PALINDROME OR NOT USING RECURSION:

#include <stdio.h>
#include <string.h>
int isPalindrome(char str[], int start, int end) {
    if (start >= end) {
        return 1;
    }
    if (str[start] != str[end]) {
        return 0;
    }
    return isPalindrome(str, start + 1, end - 1);
}
int main() {
    char str[100];
    printf("Enter a string: ");
    scanf("%s", str);
    if (isPalindrome(str, 0, strlen(str) - 1)) {
        printf("%s is a palindrome.\n", str);
    } else {
        printf("%s is not a palindrome.\n", str);
    }
    return 0;
}
